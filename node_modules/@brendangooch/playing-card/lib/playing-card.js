import {} from "./index.js";
import { Rank } from "./rank.js";
import { Suit } from "./suit.js";
export class PlayingCard {
    constructor(type) {
        this._type = type;
        this._rank = new Rank(this._type);
        this._suit = new Suit(this._type);
    }
    get type() {
        return this._type;
    }
    get rank() {
        return this._rank;
    }
    get suit() {
        return this._suit;
    }
    get name() {
        if (this.isJoker)
            return 'joker';
        return `${this.rank.name} of ${this.suit.name}s`;
    }
    get nameDefinite() {
        if (this.isJoker)
            return 'a joker';
        return `${this.rank.nameDefinite} of ${this.suit.name}s`;
    }
    get nameIndefinite() {
        if (this.isJoker)
            return 'the joker';
        return `${this.rank.nameIndefinite} of ${this.suit.name}s`;
    }
    get namePlural() {
        if (this.isJoker)
            return 'jokers';
        return `${this.rank.namePlural} of ${this.suit.name}s`;
    }
    get isJoker() {
        return this._type === 0;
    }
    clone() {
        return new PlayingCard(this._type);
    }
    isRankNumber(rank) {
        return this.rank.number === rank;
    }
    isSuitNumber(suit) {
        return this.suit.number === suit;
    }
    valueBetweenRanks(other) {
        if (this.isJoker || other.isJoker)
            return -1;
        return Math.abs(this.rank.number - other.rank.number);
    }
    isSameCardAs(other) {
        return (this.isJoker && other.isJoker) || (this.hasSameRankAs(other) && this.hasSameSuitAs(other));
    }
    hasSameRankAs(other) {
        return this.rank.number === other.rank.number;
    }
    hasHigherRankThan(other) {
        if (this.isJoker || other.isJoker)
            return false;
        return this.rank.number > other.rank.number;
    }
    hasLowerRankThan(other) {
        if (this.isJoker || other.isJoker)
            return false;
        return this.rank.number < other.rank.number;
    }
    hasSameSuitAs(other) {
        return this.suit.number === other.suit.number;
    }
    hasHigherSuitThan(other) {
        if (this.isJoker || other.isJoker)
            return false;
        return this.suit.number > other.suit.number;
    }
    hasLowerSuitThan(other) {
        if (this.isJoker || other.isJoker)
            return false;
        return this.suit.number < other.suit.number;
    }
    isHigherThan(other) {
        if (this.isJoker)
            return true;
        if (other.isJoker)
            return false;
        if (this.hasHigherRankThan(other))
            return true;
        if (this.hasSameRankAs(other) && this.hasHigherSuitThan(other))
            return true;
        return false;
    }
}
