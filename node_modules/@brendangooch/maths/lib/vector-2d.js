import { distanceBetween } from "./distance-between.js";
export class Vector2D {
    constructor(x = 1, y = 0) {
        this._x = x;
        this._y = y;
        return this;
    }
    get x() {
        return this._x;
    }
    get y() {
        return this._y;
    }
    get angle() {
        return Math.atan2(this._y, this._x);
    }
    get length() {
        return Math.sqrt(this._x * this._x + this._y * this._y);
    }
    setX(x) {
        this._x = x;
        return this;
    }
    setY(y) {
        this._y = y;
        return this;
    }
    setXY(x, y) {
        this.setX(x);
        this.setY(y);
        return this;
    }
    setAngle(radians) {
        const length = this.length;
        this.setX(Math.cos(radians) * length);
        this.setY(Math.sin(radians) * length);
        return this;
    }
    addAngle(radians) {
        this.setAngle(this.angle + radians);
        return this;
    }
    setLength(px) {
        const angle = this.angle;
        this.setX(Math.cos(angle) * px);
        this.setY(Math.sin(angle) * px);
        return this;
    }
    add(v2) {
        return new Vector2D(this._x + v2.x, this._y + v2.y);
    }
    subtract(v2) {
        return new Vector2D(this._x - v2.x, this._y - v2.y);
    }
    multiply(val) {
        return new Vector2D(this._x * val, this._y * val);
    }
    divide(val) {
        return new Vector2D(this._x / val, this._y / val);
    }
    addTo(v2) {
        this._x += v2.x;
        this._y += v2.y;
        return this;
    }
    subtractFrom(v2) {
        this._x -= v2.x;
        this._y -= v2.y;
        return this;
    }
    multiplyBy(val) {
        this._x *= val;
        this._y *= val;
        return this;
    }
    divideBy(val) {
        this._x /= val;
        this._y /= val;
        return this;
    }
    distanceTo(v2) {
        return distanceBetween(this._x, this._y, v2.x, v2.y);
    }
    normalise() {
        this.divideBy(this.length);
        return this;
    }
    copy(v2) {
        this.setX(v2.x);
        this.setY(v2.y);
        return this;
    }
    clone() {
        return new Vector2D(this._x, this._y);
    }
    save() {
        return JSON.stringify({
            x: this._x,
            y: this._y
        });
    }
    load(json) {
        const state = JSON.parse(json);
        if (state.x === undefined)
            throw new Error('missing "x" property');
        if (state.y === undefined)
            throw new Error('missing "y" property');
        this.setX(state.x);
        this.setY(state.y);
    }
    equals(v2) {
        return this._x === v2.x && this._y === v2.y;
    }
}
