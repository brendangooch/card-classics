import { Vector2D } from "./vector-2d.js";
export class QuadraticBezierCurve {
    constructor() {
        this.s = new Vector2D(0, 0);
        this.c = new Vector2D(0, 0);
        this.e = new Vector2D(0, 0);
        this.equal = true;
    }
    x(t) {
        if (t === 0)
            return this.s.x;
        if (t === 1)
            return this.e.x;
        if (this.equal)
            return this.s.x;
        return this.calculateX(t);
    }
    y(t) {
        if (t === 0)
            return this.s.y;
        if (t === 1)
            return this.e.y;
        if (this.equal)
            return this.s.y;
        return this.calculateY(t);
    }
    setStart(x, y) {
        this.s.setXY(x, y);
        this.checkEqual();
        return this;
    }
    setControl(x, y) {
        this.c.setXY(x, y);
        this.checkEqual();
        return this;
    }
    setEnd(x, y) {
        this.e.setXY(x, y);
        this.checkEqual();
        return this;
    }
    setAll(x, y) {
        this.setStart(x, y);
        this.setControl(x, y);
        this.setEnd(x, y);
    }
    distanceBetween() {
        return this.s.distanceTo(this.e);
    }
    setControlByDistanceAndAngleFromStart(distance, angle) {
        this.c =
            this.e.subtract(this.s)
                .addAngle(angle)
                .setLength(distance)
                .addTo(this.s);
    }
    save() {
        return JSON.stringify({
            start: this.s.save(),
            control: this.c.save(),
            end: this.e.save(),
            equal: this.equal
        });
    }
    load(json) {
        const state = JSON.parse(json);
        if (state.start === undefined)
            throw new Error('missing "start" property');
        if (state.control === undefined)
            throw new Error('missing "control" property');
        if (state.end === undefined)
            throw new Error('missing "end" property');
        if (state.equal === undefined)
            throw new Error('missing "equal" property');
        this.s.load(state.start);
        this.c.load(state.control);
        this.e.load(state.end);
        this.equal = state.equal;
    }
    calculateX(t) {
        return Math.pow(1 - t, 2) * this.s.x + (1 - t) * 2 * t * this.c.x + t * t * this.e.x;
    }
    calculateY(t) {
        return Math.pow(1 - t, 2) * this.s.y + (1 - t) * 2 * t * this.c.y + t * t * this.e.y;
    }
    checkEqual() {
        this.equal = this.s.equals(this.c) && this.s.equals(this.e);
    }
}
