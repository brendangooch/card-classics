import { clamp } from "@brendangooch/maths";
import AbstractCanvasComponent from "./abstract-canvas-component.js";
export default class CanvasFilter extends AbstractCanvasComponent {
    constructor() {
        super(...arguments);
        this.filters = [];
    }
    blur(n) {
        n = clamp(n, 0, 500);
        this.filters.push(`blur(${n}px)`);
        this.update();
        return this;
    }
    brightness(n) {
        n = clamp(n, 0, 30);
        this.filters.push(`brightness(${n})`);
        this.update();
        return this;
    }
    contrast(n) {
        n = clamp(n, 0, 30);
        this.filters.push(`contrast(${n})`);
        this.update();
        return this;
    }
    grayscale(n) {
        n = clamp(n, 0, 1);
        this.filters.push(`grayscale(${n})`);
        this.update();
        return this;
    }
    hueRotate(n) {
        n = clamp(n, -1, 1);
        this.filters.push(`hue-rotate(${n}turn)`);
        this.update();
        return this;
    }
    invert(n) {
        n = clamp(n, 0, 1);
        this.filters.push(`invert(${n})`);
        this.update();
        return this;
    }
    opacity(n) {
        n = clamp(n, 0, 1);
        this.filters.push(`opacity(${n})`);
        this.update();
        return this;
    }
    saturate(n) {
        n = clamp(n, 0, 50);
        this.filters.push(`saturate(${n})`);
        this.update();
        return this;
    }
    sepia(n) {
        n = clamp(n, 0, 1);
        this.filters.push(`sepia(${n})`);
        this.update();
        return this;
    }
    reset() {
        this.filters.length = 0;
        this.ctx.filter = 'none';
    }
    update() {
        this.ctx.filter = this.filters.join(' ');
    }
}
