import { clamp } from '@brendangooch/maths';
import CanvasColor from "./canvas-color.js";
import CanvasLine from './canvas-line.js';
import CanvasPath from "./canvas-path.js";
import CanvasFont from "./canvas-font.js";
import CanvasText from "./canvas-text.js";
import CanvasImage from "./canvas-image.js";
import CanvasFilter from "./canvas-filter.js";
import CanvasShadow from './canvas-shadow.js';
export class Canvas {
    constructor(width, height, id = 'canvas') {
        this.components = {
            color: new CanvasColor(),
            line: new CanvasLine(),
            path: new CanvasPath(),
            font: new CanvasFont(),
            text: new CanvasText(),
            image: new CanvasImage(),
            filter: new CanvasFilter(),
            shadow: new CanvasShadow()
        };
        this.loadCanvasElement(id);
        this.loadCTX();
        this.initialiseComponents();
        this.containCanvas();
        this.setDimensions(width, height);
        this.setSmoothing();
        this.addAccessibleContent();
    }
    get color() { return this.components.color; }
    get line() { return this.components.line; }
    get path() { return this.components.path; }
    get font() { return this.components.font; }
    get text() { return this.components.text; }
    get image() { return this.components.image; }
    get filter() { return this.components.filter; }
    get shadow() { return this.components.shadow; }
    clear() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
    save(fn) {
        this.ctx.save();
        fn();
        this.ctx.restore();
        this.font.reset();
        this.filter.reset();
        this.shadow.reset();
    }
    translate(x, y) {
        this.ctx.translate(x, y);
        return this;
    }
    rotate(radians) {
        this.ctx.rotate(radians);
        return this;
    }
    opacity(alpha) {
        this.ctx.globalAlpha = clamp(alpha, 0, 1);
        return this;
    }
    scale(n) {
        this.ctx.scale(n, n);
        return this;
    }
    scaleXY(x, y) {
        this.ctx.scale(x, y);
        return this;
    }
    enableSmoothing(quality) {
        this.ctx.imageSmoothingEnabled = true;
        this.ctx.imageSmoothingQuality = quality;
    }
    disableSmoothing() {
        this.ctx.imageSmoothingEnabled = false;
    }
    download(filename, format = 'png', quality = 1.0) {
        const dataUrl = this.canvas.toDataURL(`image/${format}`, quality);
        const tmpLink = document.createElement('a');
        tmpLink.href = dataUrl;
        tmpLink.download = filename;
        tmpLink.click();
        tmpLink.remove();
    }
    loadCanvasElement(id) {
        if (document.getElementById(id) === undefined)
            throw new Error(`no canvas element with id="${id} exists in your html file"`);
        this.canvas = document.getElementById(id);
    }
    loadCTX() {
        if (Canvas.ALPHA_ENABLED)
            this.ctx = this.canvas.getContext('2d', { alpha: true });
        else
            this.ctx = this.canvas.getContext('2d', { alpha: false });
    }
    initialiseComponents() {
        this.components.color.init(this.ctx);
        this.components.line.init(this.ctx);
        this.components.path.init(this.ctx);
        this.components.font.init(this.ctx);
        this.components.text.init(this.ctx);
        this.components.image.init(this.ctx);
        this.components.filter.init(this.ctx);
        this.components.shadow.init(this.ctx);
    }
    containCanvas() {
        if (Canvas.CONTAINED) {
            this.canvas.style.position = 'absolute';
            this.canvas.style.width = 'inherit';
            this.canvas.style.height = 'inherit';
        }
    }
    setDimensions(width, height) {
        this.canvas.width = width;
        this.canvas.height = height;
    }
    setSmoothing() {
        if (Canvas.SMOOTHING_ENABLED)
            this.enableSmoothing(Canvas.SMOOTHING_QUALITY);
        else
            this.disableSmoothing();
    }
    addAccessibleContent() {
        if (Canvas.ACCESSIBLE_CONTENT_ENABLED) {
            this.canvas.setAttribute('role', 'presenation');
            const message = 'Unfortunately your device cannot display the content correctly';
            const p = document.createElement('p');
            p.innerText = message;
            this.canvas.appendChild(p);
        }
    }
}
Canvas.CONTAINED = true;
Canvas.ALPHA_ENABLED = true;
Canvas.SMOOTHING_ENABLED = false;
Canvas.SMOOTHING_QUALITY = 'medium';
Canvas.ACCESSIBLE_CONTENT_ENABLED = true;
