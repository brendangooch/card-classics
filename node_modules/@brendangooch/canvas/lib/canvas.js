import { clamp } from '@brendangooch/maths';
import CanvasColor from "./canvas-color.js";
import CanvasLine from './canvas-line.js';
import CanvasPath from "./canvas-path.js";
import CanvasFont from "./canvas-font.js";
import CanvasText from "./canvas-text.js";
import CanvasImage from "./canvas-image.js";
import CanvasFilter from "./canvas-filter.js";
import CanvasShadow from './canvas-shadow.js';
export class Canvas {
    constructor(width, height, id = 'canvas') {
        if (document.getElementById(id) === undefined)
            throw new Error(`no canvas element with id="${id} exists in your html file"`);
        this.canvas = document.getElementById(id);
        if (Canvas.ALPHA_ENABLED)
            this.ctx = this.canvas.getContext('2d', { alpha: true });
        else
            this.ctx = this.canvas.getContext('2d', { alpha: false });
        this.canvas.width = width;
        this.canvas.height = height;
        if (Canvas.SMOOTHING_ENABLED)
            this.enableSmoothing(Canvas.SMOOTHING_QUALITY);
        else
            this.disableSmoothing();
        if (Canvas.ACCESSIBLE_CONTENT_ENABLED)
            this.addAccessibleContent();
        this._color = new CanvasColor(this.ctx);
        this._line = new CanvasLine(this.ctx);
        this._path = new CanvasPath(this.ctx);
        this._font = new CanvasFont(this.ctx);
        this._text = new CanvasText(this.ctx);
        this._image = new CanvasImage(this.ctx);
        this._filter = new CanvasFilter(this.ctx);
        this._shadow = new CanvasShadow(this.ctx);
    }
    get color() { return this._color; }
    get line() { return this._line; }
    get path() { return this._path; }
    get font() { return this._font; }
    get text() { return this._text; }
    get image() { return this._image; }
    get filter() { return this._filter; }
    get shadow() { return this._shadow; }
    clear() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
    save(fn) {
        this.ctx.save();
        fn();
        this.ctx.restore();
        this.font.reset();
        this.filter.reset();
        this.shadow.reset();
    }
    translate(x, y) {
        this.ctx.translate(x, y);
        return this;
    }
    rotate(radians) {
        this.ctx.rotate(radians);
        return this;
    }
    opacity(alpha) {
        this.ctx.globalAlpha = clamp(alpha, 0, 1);
        return this;
    }
    scale(x, y) {
        this.ctx.scale(x, y);
        return this;
    }
    enableSmoothing(quality) {
        this.ctx.imageSmoothingEnabled = true;
        this.ctx.imageSmoothingQuality = quality;
    }
    disableSmoothing() {
        this.ctx.imageSmoothingEnabled = false;
    }
    addAccessibleContent() {
        this.canvas.setAttribute('role', 'presenation');
        const message = 'Unfortunately your device cannot display the content correctly';
        const p = document.createElement('p');
        p.innerText = message;
        this.canvas.appendChild(p);
    }
}
Canvas.ALPHA_ENABLED = true;
Canvas.SMOOTHING_ENABLED = false;
Canvas.SMOOTHING_QUALITY = 'medium';
Canvas.ACCESSIBLE_CONTENT_ENABLED = true;
