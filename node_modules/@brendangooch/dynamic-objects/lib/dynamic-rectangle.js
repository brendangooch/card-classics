import { DynamicNumber } from './dynamic-number.js';
import { DynamicPosition } from './dynamic-position.js';
import { DynamicRotation } from "./dynamic-rotation.js";
import { clamp, roundToPlaces } from "@brendangooch/maths";
import { BaseDynamicObject } from "./base-dynamic-object.js";
export class DynamicRectangle extends BaseDynamicObject {
    constructor() {
        super(...arguments);
        this.components = {
            position: new DynamicPosition(),
            rotation: new DynamicRotation(),
            opacity: new DynamicNumber(DynamicRectangle.DEFAULT_OPACITY),
            scale: new DynamicNumber(DynamicRectangle.DEFAULT_SCALE),
            width: new DynamicNumber(DynamicRectangle.DEFAULT_WIDTH),
            height: new DynamicNumber(DynamicRectangle.DEFAULT_HEIGHT)
        };
        this.currentValues = {
            x: 0,
            y: 0,
            rotation: 0,
            opacity: DynamicRectangle.DEFAULT_OPACITY,
            scale: DynamicRectangle.DEFAULT_SCALE,
            width: DynamicRectangle.DEFAULT_WIDTH,
            height: DynamicRectangle.DEFAULT_HEIGHT
        };
        this._speed = 0;
        this.visible = true;
    }
    get isActive() {
        return (this.components.position.isActive ||
            this.components.rotation.isActive ||
            this.components.opacity.isActive ||
            this.components.scale.isActive ||
            this.components.width.isActive ||
            this.components.height.isActive);
    }
    get current() {
        return {
            x: this.currentValues.x,
            y: this.currentValues.y,
            rotation: this.currentValues.rotation,
            opacity: this.currentValues.opacity,
            scale: this.currentValues.scale,
            width: this.currentValues.width,
            height: this.currentValues.height
        };
    }
    get isVisible() {
        return this.visible;
    }
    duration(ms) {
        if (ms > 0) {
            this._duration = ms;
            this._speed = 0;
        }
        return this;
    }
    speed(unitsPerMs) {
        if (unitsPerMs > 0) {
            this._speed = unitsPerMs;
            this._duration = 0;
        }
        return this;
    }
    ease(easeOption) {
        this.easeOption = easeOption;
        return this;
    }
    moveTo(x, y) {
        if (this.isDynamic)
            this.dynamicChange(this.components.position);
        const duration = this.components.position.moveTo(x, y);
        if (!this.isDynamic)
            this.updateCurrentPosition();
        this.reset();
        return duration;
    }
    curveTo(x, y, distance, angle) {
        if (this.isDynamic)
            this.dynamicChange(this.components.position);
        const duration = this.components.position.curveTo(x, y, distance, angle);
        if (!this.isDynamic)
            this.updateCurrentPosition();
        this.reset();
        return duration;
    }
    rotateTo(radians) {
        if (this.isDynamic)
            this.dynamicChange(this.components.rotation);
        const duration = this.components.rotation.rotateTo(radians);
        if (!this.isDynamic)
            this.updateCurrentRotation();
        this.reset();
        return duration;
    }
    spinTo(numSpins, radians) {
        if (this.isDynamic)
            this.dynamicChange(this.components.rotation);
        const duration = this.components.rotation.spinTo(numSpins, radians);
        if (!this.isDynamic)
            this.updateCurrentRotation();
        this.reset();
        return duration;
    }
    fadeTo(opacity) {
        opacity = clamp(opacity, 0, DynamicRectangle.MAX_OPACITY);
        if (this.isDynamic)
            this.dynamicChange(this.components.opacity);
        const duration = this.components.opacity.changeTo(opacity);
        if (!this.isDynamic)
            this.updateCurrentOpacity();
        this.reset();
        return duration;
    }
    scaleTo(scale) {
        scale = clamp(scale, 0, DynamicRectangle.MAX_SCALE);
        if (this.isDynamic)
            this.dynamicChange(this.components.scale);
        const duration = this.components.scale.changeTo(scale);
        if (!this.isDynamic)
            this.updateCurrentScale();
        this.reset();
        return duration;
    }
    widthTo(width) {
        width = clamp(width, 0, DynamicRectangle.MAX_WIDTH);
        if (this.isDynamic)
            this.dynamicChange(this.components.width);
        const duration = this.components.width.changeTo(width);
        if (!this.isDynamic)
            this.updateCurrentWidth();
        this.reset();
        return duration;
    }
    heightTo(height) {
        height = clamp(height, 0, DynamicRectangle.MAX_HEIGHT);
        if (this.isDynamic)
            this.dynamicChange(this.components.height);
        const duration = this.components.height.changeTo(height);
        if (!this.isDynamic)
            this.updateCurrentHeight();
        this.reset();
        return duration;
    }
    show() {
        this.visible = true;
    }
    hide() {
        this.visible = false;
    }
    load(json) {
        const state = JSON.parse(json);
        if (state.parent === undefined)
            return false;
        if (state.position === undefined)
            return false;
        if (state.rotation === undefined)
            return false;
        if (state.opacity === undefined)
            return false;
        if (state.scale === undefined)
            return false;
        if (state.width === undefined)
            return false;
        if (state.height === undefined)
            return false;
        if (state.currentValues === undefined)
            return false;
        if (state.speed === undefined)
            return false;
        if (state.visible === undefined)
            return false;
        const parentLoaded = super.load(state.parent);
        this.components.position.load(state.position);
        this.components.rotation.load(state.rotation);
        this.components.opacity.load(state.opacity);
        this.components.scale.load(state.scale);
        this.components.width.load(state.width);
        this.components.height.load(state.height);
        this.currentValues = state.currentValues;
        this._speed = state.speed;
        this.visible = state.visible;
        return parentLoaded;
    }
    save() {
        return JSON.stringify({
            parent: super.save(),
            position: this.components.position.save(),
            rotation: this.components.rotation.save(),
            opacity: this.components.opacity.save(),
            scale: this.components.scale.save(),
            width: this.components.width.save(),
            height: this.components.height.save(),
            currentValues: this.currentValues,
            speed: this._speed,
            visible: this.visible
        });
    }
    increment(ms) {
        this.components.position.update(ms);
        if (!this.components.position.isActive)
            this.updateCurrentPosition();
        this.components.rotation.update(ms);
        if (!this.components.rotation.isActive)
            this.updateCurrentRotation();
        this.components.opacity.update(ms);
        if (!this.components.opacity.isActive)
            this.updateCurrentOpacity();
        this.components.scale.update(ms);
        if (!this.components.scale.isActive)
            this.updateCurrentScale();
        this.components.width.update(ms);
        if (!this.components.width.isActive)
            this.updateCurrentWidth();
        this.components.height.update(ms);
        if (!this.components.height.isActive)
            this.updateCurrentHeight();
    }
    updateCurrent() {
        if (this.components.position.isActive)
            this.updateCurrentPosition();
        if (this.components.rotation.isActive)
            this.updateCurrentRotation();
        if (this.components.opacity.isActive)
            this.updateCurrentOpacity();
        if (this.components.scale.isActive)
            this.updateCurrentScale();
        if (this.components.width.isActive)
            this.updateCurrentWidth();
        if (this.components.height.isActive)
            this.updateCurrentHeight();
    }
    updateComplete() {
        this.turnOff();
    }
    updateCurrentPosition() {
        this.currentValues.x = Math.round(this.components.position.x);
        this.currentValues.y = Math.round(this.components.position.y);
    }
    updateCurrentRotation() {
        this.currentValues.rotation = roundToPlaces(this.components.rotation.current, 2);
    }
    updateCurrentOpacity() {
        this.currentValues.opacity = roundToPlaces(this.components.opacity.current, 2);
    }
    updateCurrentScale() {
        this.currentValues.scale = roundToPlaces(this.components.scale.current, 2);
    }
    updateCurrentWidth() {
        this.currentValues.width = this.components.width.rounded;
    }
    updateCurrentHeight() {
        this.currentValues.height = this.components.height.rounded;
    }
    get isDynamic() {
        return this._duration > 0 || this._speed > 0;
    }
    dynamicChange(component) {
        this.setDuration(component);
        this.setSpeed(component);
        this.setEase(component);
        this.turnOn();
    }
    setDuration(component) {
        if (this._duration > 0)
            component.duration(this._duration);
    }
    setSpeed(component) {
        if (this._speed > 0)
            component.speed(this._speed);
    }
    setEase(component) {
        if (this.easeOption !== 'noEase')
            component.ease(this.easeOption);
    }
    reset() {
        this._duration = 0;
        this._speed = 0;
        this.easeOption = 'noEase';
    }
}
DynamicRectangle.DEFAULT_OPACITY = 1;
DynamicRectangle.DEFAULT_SCALE = 1;
DynamicRectangle.DEFAULT_WIDTH = 100;
DynamicRectangle.DEFAULT_HEIGHT = 100;
DynamicRectangle.MIN_OPACITY = 0;
DynamicRectangle.MIN_SCALE = 0;
DynamicRectangle.MIN_WIDTH = 0;
DynamicRectangle.MIN_HEIGHT = 0;
DynamicRectangle.MAX_OPACITY = 1;
DynamicRectangle.MAX_SCALE = 1000;
DynamicRectangle.MAX_WIDTH = 5000;
DynamicRectangle.MAX_HEIGHT = 5000;
