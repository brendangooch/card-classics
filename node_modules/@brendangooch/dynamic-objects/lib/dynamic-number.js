import { BaseDynamicObjectWithUnit } from "./base-dynamic-object-with-unit.js";
export class DynamicNumber extends BaseDynamicObjectWithUnit {
    constructor(intitial = 0) {
        super();
        this.previous = 0;
        this.next = 0;
        this.distanceBetween = 0;
        this.currentValue = 0;
        this.setAll(intitial);
    }
    get current() {
        return this.currentValue;
    }
    get rounded() {
        return Math.round(this.current);
    }
    duration(ms) {
        super.duration(ms);
        return this;
    }
    speed(unitsPerMs) {
        super.speed(unitsPerMs);
        return this;
    }
    ease(easeOption) {
        super.ease(easeOption);
        return this;
    }
    save() {
        return JSON.stringify({
            parent: super.save(),
            previous: this.previous,
            next: this.next,
            distanceBetween: this.distanceBetween,
            currentValue: this.currentValue
        });
    }
    load(json) {
        const state = JSON.parse(json);
        if (state.parent === undefined)
            return false;
        if (state.previous === undefined)
            return false;
        if (state.next === undefined)
            return false;
        if (state.distanceBetween === undefined)
            return false;
        if (state.currentValue === undefined)
            return false;
        const parentLoaded = super.load(state.parent);
        this.previous = state.previous;
        this.next = state.next;
        this.distanceBetween = state.distanceBetween;
        this.currentValue = state.currentValue;
        return parentLoaded;
    }
    setAll(n) {
        this.previous = this.next = this.currentValue = n;
        this.updateDistanceBetween();
    }
    setAllToNext() {
        this.setAll(this.next);
    }
    updateCurrent() {
        this.currentValue = this.previous + (this.distanceBetween * this.unit.current);
    }
    nextEqualsCurrent(next) {
        return next === this.currentValue;
    }
    setNext(next) {
        this.next = next;
    }
    updateDistanceBetween() {
        this.distanceBetween = this.next - this.previous;
    }
    get distance() {
        return Math.abs(this.distanceBetween);
    }
}
