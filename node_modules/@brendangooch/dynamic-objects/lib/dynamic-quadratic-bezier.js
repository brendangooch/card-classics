import { DynamicVector } from "./dynamic-vector.js";
import { QuadraticBezierCurve } from "@brendangooch/maths";
export class DynamicQuadraticBezier extends DynamicVector {
    constructor() {
        super(...arguments);
        this.bezier = new QuadraticBezierCurve();
        this.controlDistance = 0;
        this.controlAngle = 0;
    }
    duration(ms) {
        super.duration(ms);
        return this;
    }
    speed(unitsPerMs) {
        super.speed(unitsPerMs);
        return this;
    }
    ease(easeOption) {
        super.ease(easeOption);
        return this;
    }
    controlPoint(distance, angle) {
        if (!this.isActive) {
            this.controlDistance = distance;
            this.controlAngle = angle;
        }
        return this;
    }
    save() {
        return JSON.stringify({
            parent: super.save(),
            bezier: this.bezier.save(),
            controlDistance: this.controlDistance,
            controlAngle: this.controlAngle
        });
    }
    load(json) {
        const state = JSON.parse(json);
        if (state.parent === undefined)
            return false;
        if (state.bezier === undefined)
            return false;
        if (state.controlDistance === undefined)
            return false;
        if (state.controlAngle === undefined)
            return false;
        const parentLoaded = super.load(state.parent);
        this.bezier.load(state.bezier);
        this.controlDistance = state.controlDistance;
        this.controlAngle = state.controlAngle;
        return parentLoaded;
    }
    updateCurrent() {
        this.currentValue.setX(this.bezier.x(this.unit.current));
        this.currentValue.setY(this.bezier.y(this.unit.current));
    }
    preDynamicChangeHook() {
        this.bezier.setStart(this.previous.x, this.previous.y);
        this.bezier.setEnd(this.next.x, this.next.y);
        this.bezier.setControlByDistanceAndAngleFromStart(this.controlDistance, this.controlAngle);
    }
    reset() {
        super.reset();
        this.controlDistance = 0;
        this.controlAngle = 0;
    }
}
