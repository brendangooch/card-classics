import * as Ease from '@brendangooch/ease';
import { BaseDynamicObject } from './base-dynamic-object.js';
export class DynamicUnit extends BaseDynamicObject {
    constructor() {
        super(...arguments);
        this.elapsed = 0;
        this.currentValue = 0;
        this.easeFn = Ease.load('noEase');
    }
    get isActive() {
        return this.elapsed !== this._duration;
    }
    get current() {
        return this.currentValue;
    }
    duration(ms) {
        if (!this.isActive && ms > 0) {
            super.duration(ms);
            this.elapsed = ms;
        }
        return this;
    }
    ease(easeOption) {
        super.ease(easeOption);
        return this;
    }
    save() {
        return JSON.stringify({
            parent: super.save(),
            elapsed: this.elapsed,
            currentValue: this.currentValue
        });
    }
    load(json) {
        const state = JSON.parse(json);
        if (state.parent === undefined)
            return false;
        if (state.elapsed === undefined)
            return false;
        if (state.currentValue === undefined)
            return false;
        const parentLoaded = super.load(state.parent);
        this.elapsed = state.elapsed;
        this.currentValue = state.currentValue;
        this.loadEase(this.easeOption);
        return parentLoaded;
    }
    run() {
        if (!this.isActive && this._duration > 0) {
            this.loadEase(this.easeOption);
            this.elapsed = 0;
            this.turnOn();
            return true;
        }
        return false;
    }
    clone() {
        const unit = new DynamicUnit();
        unit.duration(this._duration).ease(this.easeOption);
        return unit;
    }
    increment(ms) {
        this.elapsed += ms;
        this.elapsed = Math.min(this.elapsed, this._duration);
    }
    updateCurrent() {
        this.currentValue = this.easeFn(this.progress);
    }
    updateComplete() {
        this.currentValue = 1;
        this.reset();
        this.turnOff();
    }
    get progress() {
        return (this._duration === 0) ? 0 : this.elapsed / this._duration;
    }
    loadEase(easeOption) {
        this.easeOption = easeOption;
        this.easeFn = Ease.load(easeOption);
    }
    reset() {
        this._duration = 0;
        this.elapsed = 0;
        this.loadEase('noEase');
    }
}
