import { BaseDynamicObjectWithUnit } from "./base-dynamic-object-with-unit.js";
import { Vector2D } from "@brendangooch/maths";
export class DynamicVector extends BaseDynamicObjectWithUnit {
    constructor(initial = new Vector2D(0, 0)) {
        super();
        this.previous = new Vector2D();
        this.next = new Vector2D();
        this.distanceBetween = new Vector2D();
        this.currentValue = new Vector2D();
        this.setAll(initial);
    }
    get current() {
        return {
            x: this.currentValue.x,
            y: this.currentValue.y
        };
    }
    duration(ms) {
        super.duration(ms);
        return this;
    }
    speed(unitsPerMs) {
        super.speed(unitsPerMs);
        return this;
    }
    ease(easeOption) {
        super.ease(easeOption);
        return this;
    }
    save() {
        return JSON.stringify({
            parent: super.save(),
            previous: this.previous.save(),
            next: this.next.save(),
            distanceBetween: this.distanceBetween.save(),
            currentValue: this.currentValue.save()
        });
    }
    load(json) {
        const state = JSON.parse(json);
        if (state.parent === undefined)
            return false;
        if (state.previous === undefined)
            return false;
        if (state.next === undefined)
            return false;
        if (state.distanceBetween === undefined)
            return false;
        if (state.currentValue === undefined)
            return false;
        const parentLoaded = super.load(state.parent);
        this.previous.load(state.previous);
        this.next.load(state.next);
        this.distanceBetween.load(state.distanceBetween);
        this.currentValue.load(state.currentValue);
        return parentLoaded;
    }
    setAll(v) {
        this.previous.copy(v);
        this.next.copy(v);
        this.currentValue.copy(v);
        this.updateDistanceBetween();
    }
    setAllToNext() {
        this.setAll(this.next);
    }
    updateCurrent() {
        this.currentValue = this.previous.add(this.distanceBetween.multiply(this.unit.current));
    }
    nextEqualsCurrent(next) {
        return next.equals(this.currentValue);
    }
    setNext(next) {
        this.next.copy(next);
    }
    updateDistanceBetween() {
        this.distanceBetween = this.next.subtract(this.previous);
    }
    get distance() {
        return this.distanceBetween.length;
    }
}
