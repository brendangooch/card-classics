import { DynamicQuadraticBezier } from "./dynamic-quadratic-bezier.js";
import { DynamicVector } from "./dynamic-vector.js";
import { Vector2D } from "@brendangooch/maths";
export class DynamicPosition {
    constructor(x = 0, y = 0) {
        this.vector = new DynamicVector(new Vector2D(x, y));
        this.bezier = new DynamicQuadraticBezier(new Vector2D(x, y));
        this.strategy = this.vector;
        this.currentStrategy = 'vector';
    }
    get isActive() {
        return this.strategy.isActive;
    }
    get x() {
        return this.strategy.current.x;
    }
    get y() {
        return this.strategy.current.y;
    }
    duration(ms) {
        if (!this.isActive) {
            this.vector.duration(ms);
            this.bezier.duration(ms);
        }
        return this;
    }
    speed(unitsPerMs) {
        if (!this.isActive) {
            this.vector.speed(unitsPerMs);
            this.bezier.speed(unitsPerMs);
        }
        return this;
    }
    ease(easeOption) {
        if (!this.isActive) {
            this.vector.ease(easeOption);
            this.bezier.ease(easeOption);
        }
        return this;
    }
    moveTo(x, y) {
        if (!this.isActive) {
            if (!this.isVector)
                this.switchStrategy();
            this.bezier = new DynamicQuadraticBezier(new Vector2D(x, y));
            return this.strategy.changeTo(new Vector2D(x, y));
        }
        return 0;
    }
    curveTo(x, y, distance, angle) {
        if (!this.isActive) {
            if (this.isVector)
                this.switchStrategy();
            this.bezier.controlPoint(distance, angle);
            this.vector = new DynamicVector(new Vector2D(x, y));
            return this.strategy.changeTo(new Vector2D(x, y));
        }
        return 0;
    }
    update(ms) {
        this.strategy.update(ms);
    }
    load(json) {
        const state = JSON.parse(json);
        if (state.bezier === undefined)
            return false;
        if (state.vector === undefined)
            return false;
        if (state.currentStrategy === undefined)
            return false;
        this.bezier.load(state.bezier);
        this.vector.load(state.vector);
        if (state.currentStrategy === 'vector')
            this.loadVector();
        else
            this.loadBezier();
        return true;
    }
    save() {
        return JSON.stringify({
            bezier: this.bezier.save(),
            vector: this.vector.save(),
            currentStrategy: this.currentStrategy
        });
    }
    get isVector() {
        return this.currentStrategy === 'vector';
    }
    switchStrategy() {
        if (this.currentStrategy === 'vector')
            this.loadBezier();
        else
            this.loadVector();
    }
    loadVector() {
        this.strategy = this.vector;
        this.currentStrategy = 'vector';
    }
    loadBezier() {
        this.strategy = this.bezier;
        this.currentStrategy = 'bezier';
    }
}
