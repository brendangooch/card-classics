import { BaseDynamicObject } from "./base-dynamic-object.js";
import { DynamicUnit } from "./dynamic-unit.js";
export class BaseDynamicObjectWithUnit extends BaseDynamicObject {
    constructor() {
        super(...arguments);
        this.unit = new DynamicUnit();
        this._speed = 0;
    }
    get isActive() {
        return this.unit.isActive;
    }
    speed(unitsPerMs) {
        if (!this.isActive && unitsPerMs > 0) {
            this._speed = unitsPerMs;
        }
        return this;
    }
    changeTo(next) {
        if (this.canChange(next))
            return this.doChange(next);
        return 0;
    }
    save() {
        return JSON.stringify({
            parent: super.save(),
            unit: this.unit.save(),
            speed: this._speed
        });
    }
    load(json) {
        const state = JSON.parse(json);
        if (state.parent === undefined)
            return false;
        if (state.unit === undefined)
            return false;
        if (state.speed === undefined)
            return false;
        const parentLoaded = super.load(state.parent);
        this.unit.load(state.unit);
        this._speed = state.speed;
        return parentLoaded;
    }
    increment(ms) {
        this.unit.update(ms);
    }
    updateComplete() {
        this.setAllToNext();
        this.reset();
        this.turnOff();
    }
    canChange(next) {
        return !this.isActive && !this.nextEqualsCurrent(next);
    }
    doChange(next) {
        this.setNext(next);
        this.updateDistanceBetween();
        this.updateDuration();
        if (this._duration > 0)
            this.dynamicChange();
        else
            this.instantChange();
        return this._duration;
    }
    updateDuration() {
        if (this._speed > 0 && this.distance > 0) {
            this._duration = Math.abs(this.distance / this._speed);
        }
    }
    instantChange() {
        this.setAllToNext();
        this.reset();
    }
    dynamicChange() {
        this.preDynamicChangeHook();
        this.turnOn();
        this.unit.duration(this._duration).ease(this.easeOption).run();
    }
    preDynamicChangeHook() { }
    reset() {
        this._speed = 0;
        this._duration = 0;
        this.easeOption = 'noEase';
    }
}
