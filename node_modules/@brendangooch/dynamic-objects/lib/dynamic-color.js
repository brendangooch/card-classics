import { BaseDynamicObject } from "./base-dynamic-object.js";
import { DynamicNumber } from "./dynamic-number.js";
import { clamp } from "@brendangooch/maths";
export class DynamicColor extends BaseDynamicObject {
    constructor(r, g, b) {
        super();
        this.currentValue = '';
        this.r = new DynamicNumber(r);
        this.g = new DynamicNumber(g);
        this.b = new DynamicNumber(b);
        this.updateCurrent();
    }
    get isActive() {
        return this.r.isActive || this.g.isActive || this.b.isActive;
    }
    get current() {
        return this.currentValue;
    }
    duration(ms) {
        super.duration(ms);
        return this;
    }
    ease(easeOption) {
        super.ease(easeOption);
        return this;
    }
    changeTo(r, g, b) {
        r = clamp(r, 0, 255);
        g = clamp(g, 0, 255);
        b = clamp(b, 0, 255);
        if (this.canChange(r, g, b))
            return this.doChange(r, g, b);
        return 0;
    }
    load(json) {
        const state = JSON.parse(json);
        if (state.parent === undefined)
            return false;
        if (state.r === undefined)
            return false;
        if (state.g === undefined)
            return false;
        if (state.b === undefined)
            return false;
        if (state.currentValue === undefined)
            return false;
        const parentLoaded = super.load(state.parent);
        this.r.load(state.r);
        this.g.load(state.g);
        this.b.load(state.b);
        this.currentValue = state.currentValue;
        return parentLoaded;
    }
    save() {
        return JSON.stringify({
            parent: super.save(),
            r: this.r.save(),
            g: this.g.save(),
            b: this.b.save(),
            currentValue: this.currentValue
        });
    }
    increment(ms) {
        this.r.update(ms);
        this.g.update(ms);
        this.b.update(ms);
    }
    updateCurrent() {
        this.currentValue = `rgb(${this.red},${this.green},${this.blue})`;
    }
    updateComplete() {
        this.reset();
        this.turnOff();
    }
    canChange(r, g, b) {
        return !this.isActive && (r !== this.r.current || g !== this.g.current || b !== this.b.current);
    }
    doChange(r, g, b) {
        if (this._duration > 0)
            this.dynamicChange(r, g, b);
        else
            this.instantChange(r, g, b);
        return this._duration;
    }
    instantChange(r, g, b) {
        this.r.changeTo(r);
        this.g.changeTo(g);
        this.b.changeTo(b);
        this.updateCurrent();
    }
    dynamicChange(r, g, b) {
        this.r.duration(this._duration).ease(this.easeOption).changeTo(r);
        this.g.duration(this._duration).ease(this.easeOption).changeTo(g);
        this.b.duration(this._duration).ease(this.easeOption).changeTo(b);
        this.turnOn();
    }
    reset() {
        this._duration = 0;
        this.easeOption = 'noEase';
    }
    get red() {
        return this.r.rounded;
    }
    get green() {
        return this.g.rounded;
    }
    get blue() {
        return this.b.rounded;
    }
}
