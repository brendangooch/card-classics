import { BaseDynamicObject } from "./base-dynamic-object.js";
import { DynamicNumber } from "./dynamic-number.js";
export class DynamicRotation extends BaseDynamicObject {
    constructor(initial = 0) {
        super();
        this.spin = 0;
        this._speed = 0;
        this.rotation = new DynamicNumber(initial);
    }
    get isActive() {
        return this.rotation.isActive;
    }
    get current() {
        return this.rotation.current;
    }
    duration(ms) {
        super.duration(ms);
        this._speed = 0;
        return this;
    }
    ease(easeOption) {
        super.ease(easeOption);
        return this;
    }
    speed(unitsPerMs) {
        if (!this.isActive && unitsPerMs > 0) {
            this._speed = unitsPerMs;
            this._duration = 0;
        }
        return this;
    }
    rotateTo(radians) {
        if (this.canChange(radians))
            return this.doChange(radians);
        return 0;
    }
    spinTo(numSpins, radians) {
        if ((this._duration > 0 || this._speed > 0) && Number.isInteger(numSpins)) {
            this.addSpin(numSpins);
            return this.rotateTo(radians + this.spin);
        }
        return 0;
    }
    load(json) {
        const state = JSON.parse(json);
        if (state.parent === undefined)
            return false;
        if (state.rotation === undefined)
            return false;
        if (state.spin === undefined)
            return false;
        if (state.speed === undefined)
            return false;
        const parentLoaded = super.load(state.parent);
        this.rotation.load(state.rotation);
        this.spin = state.spin;
        this._speed = state.speed;
        return parentLoaded;
    }
    save() {
        return JSON.stringify({
            parent: super.save(),
            rotation: this.rotation.save(),
            spin: this.spin,
            speed: this._speed
        });
    }
    increment(ms) {
        this.rotation.update(ms);
    }
    updateCurrent() { }
    updateComplete() {
        this.removeSpin();
        this.reset();
        this.turnOff();
    }
    canChange(radians) {
        return !this.isActive && radians !== this.current;
    }
    doChange(radians) {
        if (this._duration > 0 || this._speed > 0)
            return this.dynamicChange(radians);
        else
            this.instantChange(radians);
        return 0;
    }
    instantChange(radians) {
        this.rotation.changeTo(radians);
        this.reset();
    }
    dynamicChange(radians) {
        if (this._duration > 0)
            this.rotation.duration(this._duration);
        if (this._speed > 0)
            this.rotation.speed(this._speed);
        if (this.easeOption)
            this.rotation.ease(this.easeOption);
        this.turnOn();
        return this.rotation.changeTo(radians);
    }
    reset() {
        this._duration = 0;
        this._speed = 0;
        this.easeOption = 'noEase';
    }
    addSpin(numSpins) {
        this.spin += numSpins * DynamicRotation.TAU;
    }
    removeSpin() {
        if (this.spin !== 0) {
            this.rotation.changeTo(this.rotation.current - this.spin);
            this.spin = 0;
        }
    }
}
DynamicRotation.TAU = Math.PI * 2;
