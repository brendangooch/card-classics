import { DynamicRectangle } from "@brendangooch/dynamic-objects";
import { pointInCircle, pointInRotatedRectangle } from "@brendangooch/collision-detection";
import { distanceBetween } from "@brendangooch/maths";
export class ScreenEntity extends DynamicRectangle {
    constructor() {
        super(...arguments);
        this.zIndex = 1;
        this.hitRadius = 1;
    }
    get z() {
        return this.zIndex;
    }
    set z(zIndex) {
        this.zIndex = zIndex;
    }
    widthTo(width) {
        const duration = super.widthTo(width);
        this.updateHitRadius();
        return duration;
    }
    heightTo(height) {
        const duration = super.heightTo(height);
        this.updateHitRadius();
        return duration;
    }
    isHit(x, y) {
        const hit = pointInCircle(x, y, this.current.x, this.current.y, this.hitRadius);
        if (!hit)
            return false;
        return distanceBetween(x, y, this.current.x, this.current.y);
    }
    isHitPrecise(x, y) {
        const hit = pointInRotatedRectangle(x, y, this.current.x, this.current.y, this.current.width, this.current.height, this.current.rotation);
        if (!hit)
            return false;
        return distanceBetween(x, y, this.current.x, this.current.y);
    }
    updateHitRadius() {
        this.hitRadius = ScreenEntity.HIT_RADIUS_SCALE * (Math.max(this.current.width, this.current.height) / 2);
    }
}
ScreenEntity.HIT_RADIUS_SCALE = 0.8;
